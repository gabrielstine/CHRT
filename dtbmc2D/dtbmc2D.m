function fitResut = dtbmc2D(data,fitOptions,varargin)
%DTBMC2D apply DTB or Monte Carlo method to fit 1D signed coherence data
%   fitResut = dtbmc2D(data,fitOptions,varargin)
%       data is 1D signed coherence data,
%       fitOptions is the fitting options generated from DTBMCOPTIONS
%           function,
%       varargin is field & value pair to update fitOptions, and
%       fitResult is a structure containing fitting value and fitting
%           results returned by optimization method.
%
%   See also DTBFIT, MCFIT, DTBMCOPTIONS.

%   Copyright Jian Wang 2014

if nargin < 2
    error('Not enough inputs.');
end

if nargin > 2
    fitOptions = updateOptions(fitOptions,varargin{:}); % Update options.
end

% Initialize parallel computing environment.
fitOptions = initParallel(fitOptions);

% Load fitting values and prepare boundary profile.
tg = cat(2,fitOptions.theta,fitOptions.upBoundaryParameter,fitOptions.lowerBoundaryParameter);
tu = cat(2,fitOptions.thetaUpLimit,fitOptions.upBoundaryUpLimit,fitOptions.lowerBoundaryUpLimit);
tl = cat(2,fitOptions.thetaLowerLimit,fitOptions.upBoundaryLowerLimit,fitOptions.lowerBoundaryLowerLimit);

ubp = getProfileFcn(fitOptions.upBoundaryProfile);
lbp = getProfileFcn(fitOptions.lowerBoundaryProfile);

% Set random number generator seed.
if isempty(fitOptions.rngSeed)
    if fitOptions.isUseGPU
        rngSeed = parallel.gpu.rng;
    else
        rngSeed = rng;
    end
else
    rngSeed = fitOptions.rngSeed;
end

newFitOpt = struct('upBoundaryProfile',ubp,...    
    'lowBoundaryProfile',lbp,...
    'dt',fitOptions.dt,...
    'tMax',fitOptions.tMax,...
    'fitType',fitOptions.fitType,...
    'isChoiceVariableDuration',fitOptions.isChoiceVariableDuration,...
    'rngSeed',rngSeed,...    
    'isUseGPU',fitOptions.isUseGPU);
%     'PLOT_STATUS',fitOptions.isPlotIter);

% Set default optimization method.
if isempty(fitOptions.optMethod)
    fitOptions.optMethod = 'fminsearchbnd'; 
end

optMethod = lower(fitOptions.optMethod);

switch optMethod
    case 'fminsearchbnd'
        [theta,fval,exitflag,output] = fminsearchbnd(@(theta) newFit801_bnd2D(theta,data,newFitOpt),...
            tg,tl,tu);
        fitResut = struct('theta',theta(1:11),...
            'upperBoundaryParameter',theta(12:16),...
            'lowerBoundaryParameter',theta(17:21),...
            'fval',fval,...
            'exitflag',exitflag,...
            'output',output);                                            
        
    case 'fmincon'
        options = optimoptions(@fmincon,...
            'Display','iter',...
            'Algorithm','interior-point',...
            'FinDiffType','central',...
            'UseParallel','always');
        [theta,fval,exitflag,output] = fmincon(@(theta) newFit801_bnd2D(theta,data,newFitOpt),...
            tg,[],[],[],[],tl,tu,[],options);
        fitResut = struct('theta',theta(1:11),...
            'upperBoundaryParameter',theta(12:16),...
            'lowerBoundaryParameter',theta(17:21),...
            'fval',fval,...
            'exitflag',exitflag,...
            'output',output);
                        
    case 'globalsearch'
        options = optimoptions(@fmincon,...
            'Display','iter',...
            'Algorithm','interior-point',...
            'FinDiffType','central',...
            'UseParallel','always');
        problem = createOptimProblem('fmincon',...
            'x0',tg,...
            'objective',@(theta) newFit801_bnd2D(theta,data,newFitOpt),...
            'lb',tl,...
            'ub',tu,...
            'options',options);
        gs = GlobalSearch;
        [theta,fval,exitflag,output,solutions] = run(gs,problem);    
        fitResut = struct('theta',theta(1:11),...
            'upperBoundaryParameter',theta(12:16),...
            'lowerBoundaryParameter',theta(17:21),...                                    
            'fval',fval,...
            'exitflag',exitflag,...
            'output',output,...            
            'solutions',solutions);
        
    case 'multistart'
        options = optimoptions(@fmincon,...
            'Display','iter',...
            'Algorithm','interior-point',...
            'FinDiffType','central',...
            'UseParallel','always');
        problem = createOptimProblem('fmincon',...
            'x0',tg,...
            'objective',@(theta) newFit801_bnd2D(theta,data,newFitOpt),...
            'lb',tl,...
            'ub',tu,...
            'options',options);
        ms = MultiStart('UseParallel','always');
        [theta,fval,exitflag,output,solutions] = run(ms,problem,200);    
        fitResut = struct('theta',theta(1:11),...
            'upperBoundaryParameter',theta(12:16),...
            'lowerBoundaryParameter',theta(17:21),...                                
            'fval',fval,...
            'exitflag',exitflag,...
            'output',output,...            
            'solutions',solutions);
        
    case 'patternsearch'
        options = psoptimset(@patternsearch);
        options = psoptimset(options,...
            'CompletePoll','on',...
            'Vectorized','off',...
            'UseParallel','always');
        [theta,fval,exitflag,output] = patternsearch(@(theta) newFit801_bnd2D(theta,data,newFitOpt),...
            tg,[],[],[],[],tl,tu,[],options);
        fitResut = struct('theta',theta(1:11),...
            'upperBoundaryParameter',theta(12:16),...
            'lowerBoundaryParameter',theta(17:21),...                        
            'fval',fval,...
            'exitflag',exitflag,...
            'output',output);                        
        
    otherwise
        error('No pre-set optimization method matched.');
end





